import requests
import webbrowser
import re
import pycountry
import json
import os
from geopy.geocoders import Nominatim

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
russian_to_english_countries = {
    "—Ä–æ—Å—Å–∏—è": "Russia",
    "—è–ø–æ–Ω–∏—è": "Japan",
    "—Ñ—Ä–∞–Ω—Ü–∏—è": "France",
    "–≥–µ—Ä–º–∞–Ω–∏—è": "Germany",
    "–∏—Ç–∞–ª–∏—è": "Italy",
    "—Å—à–∞": "United States",
    "—É–∑–±–µ–∫–∏—Å—Ç–∞–Ω": "Uzbekistan",
    "–∫–∏—Ç–∞–π": "China",
    "–∏–Ω–¥–∏—è": "India",
    "—É–∫—Ä–∞–∏–Ω–∞": "Ukraine",
    "–±–µ–ª–∞—Ä—É—Å—å": "Belarus",
    "–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
    "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "United Kingdom",
    "—Ç—É—Ä—Ü–∏—è": "Turkey"
}

FILENAME = "last_cats.json"

def get_cat():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    if os.path.exists(FILENAME):
        with open(FILENAME, "r", encoding="utf-8") as f:
            last_cats = json.load(f)
        print("\nüìÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ—Ç–∏–∫–∏:")
        for url in last_cats:
            print("üêæ", url)
        again = input("üîÅ –û—Ç–∫—Ä—ã—Ç—å —ç—Ç–∏—Ö –∫–æ—Ç–∏–∫–æ–≤ —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if again == "–¥–∞":
            for url in last_cats:
                print("üîó –û—Ç–∫—Ä—ã–≤–∞—é:", url)
                webbrowser.open(url)
            return
        print("‚è≠ –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –∫–æ—Ç–∏–∫–æ–≤...")

    # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ç–∏–∫–æ–≤
    try:
        c = int(input("\nüê± –°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∫–æ—Ç–∏–∫–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å? "))
        url = f"https://api.thecatapi.com/v1/images/search?limit={c}"
        response = requests.get(url)
        data = response.json()

        urls = []
        for i in range(c):
            cat_url = data[i]['url']
            print("üîó –û—Ç–∫—Ä—ã–≤–∞—é:", cat_url)
            webbrowser.open(cat_url)
            urls.append(cat_url)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ—Ç–∏–∫–æ–≤
        with open(FILENAME, "w", encoding="utf-8") as f:
            json.dump(urls, f)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

def translate_location(city_input, country_input):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ
    """
    geolocator = Nominatim(user_agent="weather_app")
    location = geolocator.geocode(f"{city_input}, {country_input}", language="en")
    
    if location:
        parts = location.address.split(', ')
        eng_city = parts[0]
        eng_country = parts[-1]
        return eng_city, eng_country
    else:
        return None, None

# üß† –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def detect_language_from_city(city):
    return 'ru' if re.search(r'[–∞-—è–ê-–Ø—ë–Å]', city) else 'en'

# üåê –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ geopy
def translate_location(city_input, country_input):
    geolocator = Nominatim(user_agent="weather_app")
    location = geolocator.geocode(f"{city_input}, {country_input}", language="en")
    if location:
        parts = location.address.split(', ')
        eng_city = parts[0]
        eng_country = parts[-1]
        return eng_city, eng_country
    else:
        return None, None

# üì¶ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def get_weather():
    filename = "last_weather.json"

    # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as file:
            last = json.load(file)
        print("\nüìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä:")
        print(f"–°—Ç—Ä–∞–Ω–∞: {last['country_input']}")
        print(f"–ì–æ—Ä–æ–¥: {last['city_input']}")
        use_last = input("üîÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if use_last == "–¥–∞":
            eng_city, eng_country = last['eng_city'], last['eng_country']
            lang = detect_language_from_city(last['city_input'])
            return fetch_and_show_weather(eng_city, eng_country, lang, last['city_input'], last['country_input'])

        print("\nüîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")

    # üåè –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã
    while True:
        country_input = input("üåç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º): ").strip()
        city_input = input("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º): ").strip()

        # –ü–µ—Ä–µ–≤–æ–¥ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è API
        eng_city, eng_country = translate_location(city_input, country_input)
        if not eng_city:
            print("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            continue

        lang = detect_language_from_city(city_input)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        with open(filename, "w", encoding="utf-8") as file:
            json.dump({
                "city_input": city_input,
                "country_input": country_input,
                "eng_city": eng_city,
                "eng_country": eng_country
            }, file)

        break

    fetch_and_show_weather(eng_city, eng_country, lang, city_input, country_input)

# üå¶ –í—ã–≤–æ–¥ –ø–æ–≥–æ–¥—ã
def fetch_and_show_weather(eng_city, eng_country, lang, orig_city, orig_country):
    try:
        location = f"{eng_city},{eng_country}"
        url = f"https://wttr.in/{location}?format=j1&lang={lang}"
        response = requests.get(url)
        data = response.json()

        temp_c = data['current_condition'][0]['temp_C']
        description = data['current_condition'][0]['lang_ru' if lang == 'ru' else 'weatherDesc'][0]['value']

        print(f"\nüå§ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {orig_city.title()}, {orig_country.title()}:")
        print(f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C")
        print(f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {e}")

def get_exchange_rate():
    filename = "last_currency_input.json"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as file:
            last_data = json.load(file)
        
        base = last_data["base"]
        symbols = last_data["symbols"]
        
        print("\nüìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä:")
        print(f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {base}")
        print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: {', '.join(symbols)}")

        use_last = input("üîÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if use_last != "–¥–∞":
            base, symbols = ask_user_and_save(filename)
    else:
        base, symbols = ask_user_and_save(filename)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å
    url = f"https://api.exchangerate-api.com/v4/latest/{base}"
    try:
        response = requests.get(url)
        data = response.json()

        print(f"\nüìä –ö—É—Ä—Å {base} –∫ –¥—Ä—É–≥–∏–º –≤–∞–ª—é—Ç–∞–º:")
        for sym in symbols:
            sym = sym.strip().upper()
            rate = data['rates'].get(sym)
            if rate:
                print(f"üî∏ {base} ‚ûù {sym}: {rate}")
            else:
                print(f"‚ö†Ô∏è –í–∞–ª—é—Ç–∞ '{sym}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:", e)

def ask_user_and_save(filename):
    base = input("üí± –í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, USD, EUR, RUB): ").strip().upper()
    symbols_input = input("üíπ –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: RUB, EUR, JPY): ")
    symbols = [s.strip().upper() for s in symbols_input.split(",")]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(filename, "w", encoding="utf-8") as file:
        json.dump({"base": base, "symbols": symbols}, file)

    return base, symbols


